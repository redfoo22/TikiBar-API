{"version":3,"sources":["../../src/model/comment.js"],"names":["Schema","ObjectId","Types","commentResponseSchema","text","type","String","required","updated","Date","default","now","userId","ref","userProfileImgUrl","displayName","flaggedCount","Number","commentSchema","momentId","responses","archived","Boolean","model"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,mBAASA,MAAtB;AACA,IAAIC,WAAW,mBAASD,MAAT,CAAgBE,KAAhB,CAAsBD,QAArC;;AAEA,IAAIE,wBAAwB,IAAIH,MAAJ,CAAW;AACrCI,QAAM,EAACC,MAAMC,MAAP,EAAeC,UAAU,CAAC,IAAD,CAAzB,EAD+B;AAErCC,WAAS,EAAEH,MAAMI,IAAR,EAAcC,SAASD,KAAKE,GAA5B,EAF4B;AAGrCC,UAAS,EAAEP,MAAMJ,QAAR,EAAkBY,KAAK,UAAvB,EAAmCN,UAAU,CAAC,IAAD,EAAO,yBAAP,CAA7C,EAH4B;AAIrCO,qBAAmB,EAAET,MAAMC,MAAR,EAJkB;AAKrCS,eAAa,EAAEV,MAAMC,MAAR,EALwB;AAMrCU,gBAAc,EAACX,MAAMY,MAAP,EAAeP,SAAS,CAAxB;AANuB,CAAX,CAA5B;;AASA,IAAIQ,gBAAgB,IAAIlB,MAAJ,CAAW;AAC7BmB,YAAU,EAAEd,MAAMJ,QAAR,EAAkBY,KAAK,QAAvB,EAAiCN,UAAU,CAAC,IAAD,EAAO,2BAAP,CAA3C,EADmB;AAE7BK,UAAS,EAAEP,MAAMJ,QAAR,EAAkBY,KAAK,UAAvB,EAAmCN,UAAU,CAAC,IAAD,EAAO,yBAAP,CAA7C,EAFoB;AAG7BO,qBAAmB,EAAET,MAAMC,MAAR,EAHU;AAI7BS,eAAa,EAAEV,MAAMC,MAAR,EAJgB;AAK7BE,WAAS,EAAEH,MAAMI,IAAR,EAAcC,SAASD,KAAKE,GAA5B,EALoB;AAM7BP,QAAM,EAACC,MAAMC,MAAP,EAAeC,UAAU,CAAC,IAAD,CAAzB,EANuB;AAO7Ba,aAAW,CAACjB,qBAAD,CAPkB;AAQ7Ba,gBAAc,EAACX,MAAMY,MAAP,EAAeP,SAAS,CAAxB,EARe;AAS7BW,YAAU,EAAChB,MAAMiB,OAAP,EAAgBZ,SAAS,KAAzB;AATmB,CAAX,CAApB;;kBAYe,mBAASa,KAAT,CAAe,SAAf,EAA0BL,aAA1B,EAAyC,UAAzC,C","file":"comment.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nimport UserData from './userData';\nimport Moment from './moment';\n\nlet Schema = mongoose.Schema;\nlet ObjectId = mongoose.Schema.Types.ObjectId;\n\nlet commentResponseSchema = new Schema({\n  text: {type: String, required: [true]},\n  updated: { type: Date, default: Date.now },\n  userId : { type: ObjectId, ref: 'UserData', required: [true, 'Error validating userId'] },\n  userProfileImgUrl: { type: String },\n  displayName: { type: String },\n  flaggedCount: {type: Number, default: 0}\n});\n\nlet commentSchema = new Schema({\n  momentId: { type: ObjectId, ref: 'Moment', required: [true, 'Error validating momentId']},\n  userId : { type: ObjectId, ref: 'UserData', required: [true, 'Error validating userId'] },\n  userProfileImgUrl: { type: String },\n  displayName: { type: String },\n  updated: { type: Date, default: Date.now },\n  text: {type: String, required: [true]},\n  responses: [commentResponseSchema],\n  flaggedCount: {type: Number, default: 0},\n  archived: {type: Boolean, default: false}\n});\n\nexport default mongoose.model('Comment', commentSchema, 'comments');\n"]}