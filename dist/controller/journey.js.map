{"version":3,"sources":["../../src/controller/journey.js"],"names":["Promise","config","db","api","get","req","res","find","exec","err","journeys","status","json","message","findById","params","id","populate","path","model","journey","findOne","userId","post","body","title","user","newJourney","save","update","_id","$addToSet","send"],"mappings":"AAAA;;;;;;AAEA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;;;AAJA,mBAASA,OAAT,GAAmBA,OAAnB;;kBAMe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AACjC,MAAIC,MAAM,sBAAV;;AAEA;AACA;AACAA,MAAIC,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB,sBACGC,IADH,GAEGC,IAFH,CAEQ,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvB,UAAID,GAAJ,EAAS;AACPH,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACDP,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AACD,KARH;AASD,GAVD;;AAYA;AACA;AACAP,MAAIC,GAAJ,CAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,sBACGQ,QADH,CACYT,IAAIU,MAAJ,CAAWC,EADvB,EAEGC,QAFH,CAEY;AACNC,YAAM,SADA;AAENC,aAAO;AAFD,KAFZ,EAMGX,IANH,CAMQ,UAACC,GAAD,EAAMW,OAAN,EAAkB;AACtB,UAAIX,GAAJ,EAAS;AACPH,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACDP,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACD,KAZH;AAaD,GAdD;;AAgBA;AACA;AACAjB,MAAIC,GAAJ,CAAQ,mBAAR,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,sBACGe,OADH,CACW,EAAE,UAAUhB,IAAIU,MAAJ,CAAWO,MAAvB,EADX,EAEGL,QAFH,CAEY;AACNC,YAAM,SADA;AAENC,aAAO;AAFD,KAFZ,EAMGX,IANH,CAMQ,UAACC,GAAD,EAAMW,OAAN,EAAkB;AACtB,UAAIX,GAAJ,EAAS;AACPH,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACDP,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACD,KAZH;AAaD,GAdD;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACAjB,MAAIoB,IAAJ,CAAS,aAAT,EAAwB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AACpC,QAAMgB,SAASjB,IAAImB,IAAJ,CAASF,MAAxB;AACA,QAAMG,QAAQpB,IAAImB,IAAJ,CAASC,KAAvB;;AAEA,QAAIA,SAAS,IAAT,IAAiBH,UAAU,IAA/B,EAAqC;AACnChB,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,kDAAF,EAArB;AACA;AACD;AACD,uBACGC,QADH,CACYQ,MADZ,EACoB,UAACb,GAAD,EAAMiB,IAAN,EAAe;AAC/B,UAAIjB,GAAJ,EAAS;AACPH,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACD,UAAI,CAACa,IAAL,EAAW;AACTpB,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAAF,EAArB;AACA;AACD;AACD,UAAIc,aAAa,sBAAY;AAC3BL,gBAAQA,MADmB;AAE3BG,eAAOA;AAFoB,OAAZ,CAAjB;AAIAE,iBAAWC,IAAX,CAAgB,eAAO;AACrB,YAAInB,GAAJ,EAAS;AACPH,cAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACD,2BAASgB,MAAT,CAAgB,EAAEC,KAAKR,MAAP,EAAhB,EAAiC,EAAES,WAAW,EAAErB,UAAUiB,WAAWG,GAAvB,EAAb,EAAjC,EAA8E,UAACrB,GAAD,EAAMiB,IAAN,EAAe;AAC3F,cAAIjB,GAAJ,EAAS;AACPH,gBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,iCAA+BJ,IAAII,OAArC,EAArB;AACA;AACD;AACDP,cAAI0B,IAAJ,CAASL,UAAT;AACH,SANC;AAOH,OAZC;AAaH,KA3BD;AA4BD,GApCD;;AAsCA,SAAOxB,GAAP;AACD,C","file":"journey.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nmongoose.Promise = Promise;\nimport { Router } from 'express';\nimport Journey from '../model/journey';\nimport UserData from '../model/userData';\nimport bodyParser from 'body-parser';\n\nexport default ({ config, db }) => {\n  let api = Router();\n\n  // GET all journeys\n  // '/v1/journeys'\n  api.get('/', (req, res) => {\n    Journey\n      .find()\n      .exec((err, journeys) => {\n        if (err) {\n          res.status(409).json({ message: `An error occurred: ${err.message}` });\n          return;\n        }\n        res.status(200).json(journeys);\n      });\n  });\n\n  // GET Specific journey byId\n  // '/v1/journeys/byId/:id'\n  api.get('/byId/:id', (req, res) => {\n    Journey\n      .findById(req.params.id)\n      .populate({\n          path: 'moments',\n          model: 'Moment'\n        })\n      .exec((err, journey) => {\n        if (err) {\n          res.status(409).json({ message: `An error occurred: ${err.message}` });\n          return;\n        }\n        res.status(200).json(journey);\n      });\n  });\n\n  // GET Specific journey by userId\n  // '/v1/journeys/byUserId/:userId'\n  api.get('/byUserId/:userId', (req, res) => {\n    Journey\n      .findOne({ 'userId': req.params.userId })\n      .populate({\n          path: 'moments',\n          model: 'Moment'\n        })\n      .exec((err, journey) => {\n        if (err) {\n          res.status(409).json({ message: `An error occurred: ${err.message}` });\n          return;\n        }\n        res.status(200).json(journey);\n      });\n  });\n\n  // POST add new Journey\n  // {\n  //    userId: userId,\n  //    title: 'RedFoo's Journey',\n  // }\n  // '/v1/journeys/addJourney'\n  api.post('/addJourney', (req, res) => {\n    const userId = req.body.userId;\n    const title = req.body.title;\n\n    if (title == null && userId == null) {\n      res.status(409).json({ message: `You must enter a Title Name and user id` });\n      return;\n    }\n    UserData\n      .findById(userId, (err, user) => {\n        if (err) {\n          res.status(500).json({ message: `An error occurred: ${err.message}` });\n          return;\n        }\n        if (!user) {\n          res.status(404).json({ message: `User ID does not exist` });\n          return;\n        }\n        let newJourney = new Journey({\n          userId: userId,\n          title: title\n        });\n        newJourney.save(err => {\n          if (err) {\n            res.status(409).json({ message: `An error occurred: ${err.message}` });\n            return;\n          }\n          UserData.update({ _id: userId }, { $addToSet: { journeys: newJourney._id } }, (err, user) => {\n            if (err) {\n              res.status(500).json({ message: `An error occurred: ${err.message}` });\n              return;\n            }\n            res.send(newJourney);\n        });\n      });\n    });\n  });\n\n  return api;\n}\n"]}